
Display_your_name_in_2x16_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000274  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a7  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000474  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000237  00000000  00000000  00000839  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000530  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f7  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000260  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  7a:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  82:	66 23       	and	r22, r22
  84:	11 f0       	breq	.+4      	; 0x8a <lcd_write+0x8>
       lcd_rs_high();
  86:	90 9a       	sbi	0x12, 0	; 18
  88:	01 c0       	rjmp	.+2      	; 0x8c <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  8a:	90 98       	cbi	0x12, 0	; 18
    }
    lcd_rw_low();
  8c:	91 98       	cbi	0x12, 1	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  8e:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  90:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  92:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  94:	8f 9a       	sbi	0x11, 7	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  96:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  98:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  9a:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  9c:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  9e:	87 fd       	sbrc	r24, 7
  a0:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  a2:	86 fd       	sbrc	r24, 6
  a4:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  a6:	85 fd       	sbrc	r24, 5
  a8:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  aa:	84 fd       	sbrc	r24, 4
  ac:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  ae:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_write+0x30>
    lcd_e_low();
  b2:	92 98       	cbi	0x12, 2	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  b4:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  b6:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  b8:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ba:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  bc:	83 fd       	sbrc	r24, 3
  be:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  c0:	82 fd       	sbrc	r24, 2
  c2:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  c4:	81 fd       	sbrc	r24, 1
  c6:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  c8:	80 fd       	sbrc	r24, 0
  ca:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  cc:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_write+0x4e>
    lcd_e_low();
  d0:	92 98       	cbi	0x12, 2	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  d2:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d4:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d6:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d8:	97 9a       	sbi	0x12, 7	; 18
    }
}
  da:	08 95       	ret

000000dc <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  dc:	88 23       	and	r24, r24
  de:	11 f0       	breq	.+4      	; 0xe4 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  e0:	90 9a       	sbi	0x12, 0	; 18
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  e4:	90 98       	cbi	0x12, 0	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  e6:	91 9a       	sbi	0x12, 1	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  e8:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  ea:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  ec:	8e 98       	cbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  ee:	8f 98       	cbi	0x11, 7	; 17
                
        /* read high nibble first */
        lcd_e_high();
  f0:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();        
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  f4:	84 9b       	sbis	0x10, 4	; 16
  f6:	02 c0       	rjmp	.+4      	; 0xfc <lcd_read+0x20>
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_read+0x22>
  fc:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
  fe:	85 99       	sbic	0x10, 5	; 16
 100:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 102:	86 99       	sbic	0x10, 6	; 16
 104:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 106:	87 99       	sbic	0x10, 7	; 16
 108:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 10a:	92 98       	cbi	0x12, 2	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 10e:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 112:	84 99       	sbic	0x10, 4	; 16
 114:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 116:	85 99       	sbic	0x10, 5	; 16
 118:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 11a:	86 99       	sbic	0x10, 6	; 16
 11c:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 11e:	87 99       	sbic	0x10, 7	; 16
 120:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 122:	92 98       	cbi	0x12, 2	; 18
    }
    return data;
}
 124:	08 95       	ret

00000126 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 12c:	87 fd       	sbrc	r24, 7
 12e:	fb cf       	rjmp	.-10     	; 0x126 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
    
}/* lcd_waitbusy */
 138:	08 95       	ret

0000013a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 13a:	1f 93       	push	r17
 13c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 13e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    lcd_write(cmd,0);
 142:	81 2f       	mov	r24, r17
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 14e:	1f 93       	push	r17
 150:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 152:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    lcd_write(data,1);
 156:	81 2f       	mov	r24, r17
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
 15e:	1f 91       	pop	r17
 160:	08 95       	ret

00000162 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 162:	66 23       	and	r22, r22
 164:	11 f4       	brne	.+4      	; 0x16a <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 166:	80 58       	subi	r24, 0x80	; 128
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 16a:	80 54       	subi	r24, 0x40	; 64
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 170:	08 95       	ret

00000172 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 172:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
}
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
}
 180:	08 95       	ret

00000182 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
}
 188:	08 95       	ret

0000018a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 18a:	1f 93       	push	r17
 18c:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 18e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    if (c=='\n')
 192:	1a 30       	cpi	r17, 0x0A	; 10
 194:	49 f4       	brne	.+18     	; 0x1a8 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 196:	80 34       	cpi	r24, 0x40	; 64
 198:	10 f0       	brcs	.+4      	; 0x19e <lcd_putc+0x14>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <lcd_putc+0x16>
 19e:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1a0:	80 58       	subi	r24, 0x80	; 128
 1a2:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1a8:	81 2f       	mov	r24, r17
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
    }

}/* lcd_putc */
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1bc:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1c0:	89 91       	ld	r24, Y+
 1c2:	88 23       	and	r24, r24
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1d4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
 1d8:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	84 91       	lpm	r24, Z+
 1de:	88 23       	and	r24, r24
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e8:	1f 93       	push	r17
 1ea:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ec:	88 9a       	sbi	0x11, 0	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	89 9a       	sbi	0x11, 1	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f0:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f2:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f4:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f6:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f8:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	80 ea       	ldi	r24, 0xA0	; 160
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 202:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 204:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 206:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x22>
    lcd_e_low();
 20a:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20c:	80 ee       	ldi	r24, 0xE0	; 224
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 214:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
    lcd_e_low();
 218:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 224:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
    lcd_e_low();
 228:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22a:	fc 01       	movw	r30, r24
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 230:	94 98       	cbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 232:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x4e>
    lcd_e_low();
 236:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 248:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 252:	81 2f       	mov	r24, r17
 254:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>

}/* lcd_init */
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <main>:



int main (void)
{
lcd_init(LCD_DISP_ON);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
lcd_puts("Hello... 123\n Testing");
 262:	80 e6       	ldi	r24, 0x60	; 96
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_puts>
} 
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
