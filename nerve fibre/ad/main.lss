
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000c26  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800078  00800078  00000cd2  2**0
                  ALLOC
  3 .stab         000012a8  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa2  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e2       	ldi	r30, 0x26	; 38
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e7       	ldi	r26, 0x78	; 120
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 38       	cpi	r26, 0x8B	; 139
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	ff d0       	rcall	.+510    	; 0x258 <main>
  5a:	e4 c5       	rjmp	.+3016   	; 0xc24 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <toggle_e>:
#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  5e:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
  60:	00 c0       	rjmp	.+0      	; 0x62 <toggle_e+0x4>
    lcd_e_low();
  62:	92 98       	cbi	0x12, 2	; 18
  64:	08 95       	ret

00000066 <lcd_write>:
}
#endif


/*************************************************************************
Low-level function to write byte to LCD controller
Input:    data   byte to write to LCD
          rs     1: write data    
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  66:	cf 93       	push	r28
  68:	df 93       	push	r29
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  6a:	66 23       	and	r22, r22
  6c:	11 f0       	breq	.+4      	; 0x72 <lcd_write+0xc>
       lcd_rs_high();
  6e:	90 9a       	sbi	0x12, 0	; 18
  70:	01 c0       	rjmp	.+2      	; 0x74 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  72:	90 98       	cbi	0x12, 0	; 18
    }
    lcd_rw_low();
  74:	91 98       	cbi	0x12, 1	; 18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  76:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  78:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  7a:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  7c:	8f 9a       	sbi	0x11, 7	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  7e:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  80:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  82:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  84:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  86:	87 fd       	sbrc	r24, 7
  88:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  8a:	c8 2f       	mov	r28, r24
  8c:	dd 27       	eor	r29, r29
  8e:	c6 fd       	sbrc	r28, 6
  90:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  92:	c5 fd       	sbrc	r28, 5
  94:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  96:	c4 fd       	sbrc	r28, 4
  98:	94 9a       	sbi	0x12, 4	; 18
        lcd_e_toggle();
  9a:	e1 df       	rcall	.-62     	; 0x5e <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  9c:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  9e:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  a0:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  a2:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  a4:	c3 fd       	sbrc	r28, 3
  a6:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  a8:	c2 fd       	sbrc	r28, 2
  aa:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  ac:	c1 fd       	sbrc	r28, 1
  ae:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  b0:	c0 fd       	sbrc	r28, 0
  b2:	94 9a       	sbi	0x12, 4	; 18
        lcd_e_toggle();        
  b4:	d4 df       	rcall	.-88     	; 0x5e <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  b6:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  b8:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  ba:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  bc:	97 9a       	sbi	0x12, 7	; 18
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <lcd_read>:
    }
}
#else
#define lcd_write(d,rs) if (rs) *(volatile uint8_t*)(LCD_IO_DATA) = d; else *(volatile uint8_t*)(LCD_IO_FUNCTION) = d;
/* rs==0 -> write instruction to LCD_IO_FUNCTION */
/* rs==1 -> write data to LCD_IO_DATA */
#endif


/*************************************************************************
Low-level function to read byte from LCD controller
Input:    rs     1: read data    
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  c4:	88 23       	and	r24, r24
  c6:	11 f0       	breq	.+4      	; 0xcc <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  c8:	90 9a       	sbi	0x12, 0	; 18
  ca:	01 c0       	rjmp	.+2      	; 0xce <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  cc:	90 98       	cbi	0x12, 0	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  ce:	91 9a       	sbi	0x12, 1	; 18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
        lcd_e_low();
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  d0:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  d2:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  d4:	8e 98       	cbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  d6:	8f 98       	cbi	0x11, 7	; 17
                
        /* read high nibble first */
        lcd_e_high();
  d8:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();        
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  dc:	84 9b       	sbis	0x10, 4	; 16
  de:	02 c0       	rjmp	.+4      	; 0xe4 <lcd_read+0x20>
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_read+0x22>
  e4:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
  e6:	85 99       	sbic	0x10, 5	; 16
  e8:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
  ea:	86 99       	sbic	0x10, 6	; 16
  ec:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
  ee:	87 99       	sbic	0x10, 7	; 16
  f0:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
  f2:	92 98       	cbi	0x12, 2	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
  f6:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
  fa:	84 99       	sbic	0x10, 4	; 16
  fc:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
  fe:	85 99       	sbic	0x10, 5	; 16
 100:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 102:	86 99       	sbic	0x10, 6	; 16
 104:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 106:	87 99       	sbic	0x10, 7	; 16
 108:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 10a:	92 98       	cbi	0x12, 2	; 18
    }
    return data;
}
 10c:	99 27       	eor	r25, r25
 10e:	08 95       	ret

00000110 <lcd_waitbusy>:
#else
#define lcd_read(rs) (rs) ? *(volatile uint8_t*)(LCD_IO_DATA+LCD_IO_READ) : *(volatile uint8_t*)(LCD_IO_FUNCTION+LCD_IO_READ)
/* rs==0 -> read instruction from LCD_IO_FUNCTION */
/* rs==1 -> read data from LCD_IO_DATA */
#endif


/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	d8 df       	rcall	.-80     	; 0xc4 <lcd_read>
 114:	87 fd       	sbrc	r24, 7
 116:	fc cf       	rjmp	.-8      	; 0x110 <lcd_waitbusy>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	d3 df       	rcall	.-90     	; 0xc4 <lcd_read>
    
}/* lcd_waitbusy */
 11e:	99 27       	eor	r25, r25
 120:	08 95       	ret

00000122 <lcd_command>:


/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;


#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
#endif
#if LCD_LINES==4
#if KS0073_4LINES_MODE
    if ( pos < LCD_START_LINE2 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE3) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);

}/* lcd_newline */


/*
** PUBLIC FUNCTIONS 
*/

/*************************************************************************
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 122:	1f 93       	push	r17
 124:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 126:	f4 df       	rcall	.-24     	; 0x110 <lcd_waitbusy>
    lcd_write(cmd,0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	81 2f       	mov	r24, r17
 12c:	9c df       	rcall	.-200    	; 0x66 <lcd_write>
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <lcd_data>:
}


/*************************************************************************
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 132:	1f 93       	push	r17
 134:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 136:	ec df       	rcall	.-40     	; 0x110 <lcd_waitbusy>
    lcd_write(data,1);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 2f       	mov	r24, r17
 13c:	94 df       	rcall	.-216    	; 0x66 <lcd_write>
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <lcd_gotoxy>:
}



/*************************************************************************
Set cursor to specified position
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 142:	66 23       	and	r22, r22
 144:	11 f4       	brne	.+4      	; 0x14a <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 146:	80 58       	subi	r24, 0x80	; 128
 148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 14a:	80 54       	subi	r24, 0x40	; 64
 14c:	ea df       	rcall	.-44     	; 0x122 <lcd_command>
 14e:	08 95       	ret

00000150 <lcd_getxy>:
#endif
#if LCD_LINES==4
    if ( y==0 )
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else if ( y==1)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    else if ( y==2)
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 150:	df df       	rcall	.-66     	; 0x110 <lcd_waitbusy>
}
 152:	99 27       	eor	r25, r25
 154:	08 95       	ret

00000156 <lcd_clrscr>:


/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	e4 df       	rcall	.-56     	; 0x122 <lcd_command>
 15a:	08 95       	ret

0000015c <lcd_home>:
}


/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	e1 df       	rcall	.-62     	; 0x122 <lcd_command>
 160:	08 95       	ret

00000162 <lcd_putc>:
}


/*************************************************************************
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 162:	1f 93       	push	r17
 164:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 166:	d4 df       	rcall	.-88     	; 0x110 <lcd_waitbusy>
    if (c=='\n')
 168:	1a 30       	cpi	r17, 0x0A	; 10
 16a:	41 f4       	brne	.+16     	; 0x17c <lcd_putc+0x1a>
 16c:	80 34       	cpi	r24, 0x40	; 64
 16e:	10 f4       	brcc	.+4      	; 0x174 <lcd_putc+0x12>
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	01 c0       	rjmp	.+2      	; 0x176 <lcd_putc+0x14>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	80 58       	subi	r24, 0x80	; 128
 178:	d4 df       	rcall	.-88     	; 0x122 <lcd_command>
 17a:	03 c0       	rjmp	.+6      	; 0x182 <lcd_putc+0x20>
    {
        lcd_newline(pos);
    }
    else
    {
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ){
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#elif LCD_LINES==4
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
        }else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3,0);
        }else if ( pos == LCD_START_LINE3+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4,0);
        }else if ( pos == LCD_START_LINE4+LCD_DISP_LENGTH ) {
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 2f       	mov	r24, r17
 180:	72 df       	rcall	.-284    	; 0x66 <lcd_write>
 182:	1f 91       	pop	r17
 184:	08 95       	ret

00000186 <lcd_puts>:
    }

}/* lcd_putc */


/*************************************************************************
Display string without auto linefeed 
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_puts+0xa>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 18e:	e9 df       	rcall	.-46     	; 0x162 <lcd_putc>
 190:	89 91       	ld	r24, Y+
 192:	88 23       	and	r24, r24
 194:	e1 f7       	brne	.-8      	; 0x18e <lcd_puts+0x8>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_puts_p>:
    }

}/* lcd_puts */


/*************************************************************************
Display string from program memory without auto linefeed 
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_puts_p+0xa>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1a4:	de df       	rcall	.-68     	; 0x162 <lcd_putc>
 1a6:	fe 01       	movw	r30, r28
 1a8:	21 96       	adiw	r28, 0x01	; 1
 1aa:	84 91       	lpm	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <lcd_puts_p+0x8>
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_init>:
    }

}/* lcd_puts_p */


/*************************************************************************
Initialize display and select type of cursor 
Input:    dispAttr LCD_DISP_OFF            display off
                   LCD_DISP_ON             display on, cursor off
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	f8 2e       	mov	r15, r24
#if LCD_IO_MODE
    /*
     *  Initialize LCD to 4 bit I/O mode
     */
     
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1be:	88 9a       	sbi	0x11, 0	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1c0:	89 9a       	sbi	0x11, 1	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1c2:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1c4:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1c6:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1c8:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1ca:	8f 9a       	sbi	0x11, 7	; 17
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x1a>
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1d4:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d6:	94 9a       	sbi	0x12, 4	; 18
    lcd_e_toggle();
 1d8:	42 df       	rcall	.-380    	; 0x5e <toggle_e>
 1da:	80 ee       	ldi	r24, 0xE0	; 224
 1dc:	94 e0       	ldi	r25, 0x04	; 4
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x28>
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e2:	3d df       	rcall	.-390    	; 0x5e <toggle_e>
 1e4:	00 e1       	ldi	r16, 0x10	; 16
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	c8 01       	movw	r24, r16
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x34>
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ee:	37 df       	rcall	.-402    	; 0x5e <toggle_e>
 1f0:	c8 01       	movw	r24, r16
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_init+0x3c>
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f6:	94 98       	cbi	0x12, 4	; 18
    lcd_e_toggle();
 1f8:	32 df       	rcall	.-412    	; 0x5e <toggle_e>
 1fa:	c8 01       	movw	r24, r16
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x46>
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
#else
    /*
     * Initialize LCD to 8 bit memory mapped mode
     */
    
    /* enable external SRAM (memory mapped lcd) and one wait state */        
    MCUCR = _BV(SRE) | _BV(SRW);

    /* reset LCD */
    delay(16000);                           /* wait 16ms after power-on     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                   
    delay(4992);                            /* wait 5ms                     */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(64);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(64);                              /* wait 64us                    */
#endif

#if KS0073_4LINES_MODE
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	8f df       	rcall	.-226    	; 0x122 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	8d df       	rcall	.-230    	; 0x122 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 208:	a6 df       	rcall	.-180    	; 0x156 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20a:	86 e0       	ldi	r24, 0x06	; 6
 20c:	8a df       	rcall	.-236    	; 0x122 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 20e:	8f 2d       	mov	r24, r15
 210:	88 df       	rcall	.-240    	; 0x122 <lcd_command>
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	08 95       	ret

0000021a <adc_init>:
unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
 21a:	86 e8       	ldi	r24, 0x86	; 134
 21c:	86 b9       	out	0x06, r24	; 6
 21e:	08 95       	ret

00000220 <getdata>:
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
 220:	90 e6       	ldi	r25, 0x60	; 96
 222:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
 224:	97 b1       	in	r25, 0x07	; 7
 226:	98 2b       	or	r25, r24
 228:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
 22a:	36 9a       	sbi	0x06, 6	; 6
   	while((ADCSRA&0x40)==0x40);    //give some time delay to complit the aDC convertion
 22c:	36 99       	sbic	0x06, 6	; 6
 22e:	fe cf       	rjmp	.-4      	; 0x22c <getdata+0xc>
	return ADCH;
 230:	85 b1       	in	r24, 0x05	; 5
  }
 232:	99 27       	eor	r25, r25
 234:	08 95       	ret

00000236 <ReadADC>:
int ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;
   ADMUX = (ADMUX & 0xF8) | ch;
 236:	97 b1       	in	r25, 0x07	; 7
 238:	98 7f       	andi	r25, 0xF8	; 248
 23a:	87 70       	andi	r24, 0x07	; 7
 23c:	98 2b       	or	r25, r24
 23e:	97 b9       	out	0x07, r25	; 7

   //Start Single conversion
   ADCSRA |= (1<<ADSC);
 240:	36 9a       	sbi	0x06, 6	; 6

   //Wait for conversion to complete
   while(!(ADCSRA&(1<<ADIF)));
 242:	34 9b       	sbis	0x06, 4	; 6
 244:	fe cf       	rjmp	.-4      	; 0x242 <ReadADC+0xc>

   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   ADCSRA|=(1<<ADIF);
 246:	34 9a       	sbi	0x06, 4	; 6

   return(ADC);
 248:	84 b1       	in	r24, 0x04	; 4
 24a:	95 b1       	in	r25, 0x05	; 5
 24c:	08 95       	ret

0000024e <initADC>:
}

void initADC()
{
ADMUX=(1<<REFS0);  // For Aref=AVcc;
 24e:	80 e4       	ldi	r24, 0x40	; 64
 250:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1); //Prescalar div factor =64
 252:	8e e8       	ldi	r24, 0x8E	; 142
 254:	86 b9       	out	0x06, r24	; 6
 256:	08 95       	ret

00000258 <main>:
}




void main()
{
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
                    // turn on interrupts

lcd_init(LCD_DISP_ON);
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	a3 df       	rcall	.-186    	; 0x1b6 <lcd_init>
lcd_clrscr();
 270:	72 df       	rcall	.-284    	; 0x156 <lcd_clrscr>
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	87 b9       	out	0x07, r24	; 7
 276:	8e e8       	ldi	r24, 0x8E	; 142
 278:	86 b9       	out	0x06, r24	; 6
initADC();

int x,y;
DDRB = 0xFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	87 bb       	out	0x17, r24	; 23
lcd_gotoxy(0,0);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	5f df       	rcall	.-322    	; 0x142 <lcd_gotoxy>
lcd_puts("RED:");
 284:	80 e6       	ldi	r24, 0x60	; 96
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	7e df       	rcall	.-260    	; 0x186 <lcd_puts>
lcd_gotoxy(8,0);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	59 df       	rcall	.-334    	; 0x142 <lcd_gotoxy>
lcd_puts("BLU:");
 290:	85 e6       	ldi	r24, 0x65	; 101
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	78 df       	rcall	.-272    	; 0x186 <lcd_puts>
lcd_gotoxy(0,1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	53 df       	rcall	.-346    	; 0x142 <lcd_gotoxy>
lcd_puts("WHI:");
 29c:	8a e6       	ldi	r24, 0x6A	; 106
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	72 df       	rcall	.-284    	; 0x186 <lcd_puts>
lcd_gotoxy(8,1);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	4d df       	rcall	.-358    	; 0x142 <lcd_gotoxy>
lcd_puts("YEL:");
 2a8:	8f e6       	ldi	r24, 0x6F	; 111
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	6c df       	rcall	.-296    	; 0x186 <lcd_puts>

while(1)
{
lcd_gotoxy(3,0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	47 df       	rcall	.-370    	; 0x142 <lcd_gotoxy>
x=ReadADC(0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	bf df       	rcall	.-130    	; 0x236 <ReadADC>
y=(300 - x)/3.0;
sprintf(buffer,"%4d",y);
 2b8:	2c e2       	ldi	r18, 0x2C	; 44
 2ba:	e2 2e       	mov	r14, r18
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	f2 2e       	mov	r15, r18
 2c0:	b7 01       	movw	r22, r14
 2c2:	68 1b       	sub	r22, r24
 2c4:	79 0b       	sbc	r23, r25
 2c6:	88 27       	eor	r24, r24
 2c8:	77 fd       	sbrc	r23, 7
 2ca:	80 95       	com	r24
 2cc:	98 2f       	mov	r25, r24
 2ce:	f9 d3       	rcall	.+2034   	; 0xac2 <__floatsisf>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e4       	ldi	r20, 0x40	; 64
 2d6:	50 e4       	ldi	r21, 0x40	; 64
 2d8:	91 d3       	rcall	.+1826   	; 0x9fc <__divsf3>
 2da:	d6 d3       	rcall	.+1964   	; 0xa88 <__fixsfsi>
 2dc:	7f 93       	push	r23
 2de:	6f 93       	push	r22
 2e0:	94 e7       	ldi	r25, 0x74	; 116
 2e2:	a9 2e       	mov	r10, r25
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	b9 2e       	mov	r11, r25
 2e8:	bf 92       	push	r11
 2ea:	af 92       	push	r10
 2ec:	8a e7       	ldi	r24, 0x7A	; 122
 2ee:	c8 2e       	mov	r12, r24
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	d8 2e       	mov	r13, r24
 2f4:	df 92       	push	r13
 2f6:	cf 92       	push	r12
 2f8:	86 d0       	rcall	.+268    	; 0x406 <sprintf>
lcd_puts(buffer);
 2fa:	c6 01       	movw	r24, r12
 2fc:	44 df       	rcall	.-376    	; 0x186 <lcd_puts>

lcd_gotoxy(11,0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	1f df       	rcall	.-450    	; 0x142 <lcd_gotoxy>
x=ReadADC(1);
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	97 df       	rcall	.-210    	; 0x236 <ReadADC>
y=(300 - x)/3.0;
sprintf(buffer,"%4d",y);
 308:	b7 01       	movw	r22, r14
 30a:	68 1b       	sub	r22, r24
 30c:	79 0b       	sbc	r23, r25
 30e:	88 27       	eor	r24, r24
 310:	77 fd       	sbrc	r23, 7
 312:	80 95       	com	r24
 314:	98 2f       	mov	r25, r24
 316:	d5 d3       	rcall	.+1962   	; 0xac2 <__floatsisf>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e4       	ldi	r20, 0x40	; 64
 31e:	50 e4       	ldi	r21, 0x40	; 64
 320:	6d d3       	rcall	.+1754   	; 0x9fc <__divsf3>
 322:	b2 d3       	rcall	.+1892   	; 0xa88 <__fixsfsi>
 324:	7f 93       	push	r23
 326:	6f 93       	push	r22
 328:	bf 92       	push	r11
 32a:	af 92       	push	r10
 32c:	df 92       	push	r13
 32e:	cf 92       	push	r12
 330:	6a d0       	rcall	.+212    	; 0x406 <sprintf>
lcd_puts(buffer);
 332:	c6 01       	movw	r24, r12
 334:	28 df       	rcall	.-432    	; 0x186 <lcd_puts>

lcd_gotoxy(3,1);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	03 df       	rcall	.-506    	; 0x142 <lcd_gotoxy>
x=ReadADC(2);
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	7b df       	rcall	.-266    	; 0x236 <ReadADC>
y=(300 - x)/3.0;
sprintf(buffer,"%4d",y);
 340:	b7 01       	movw	r22, r14
 342:	68 1b       	sub	r22, r24
 344:	79 0b       	sbc	r23, r25
 346:	88 27       	eor	r24, r24
 348:	77 fd       	sbrc	r23, 7
 34a:	80 95       	com	r24
 34c:	98 2f       	mov	r25, r24
 34e:	b9 d3       	rcall	.+1906   	; 0xac2 <__floatsisf>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e4       	ldi	r20, 0x40	; 64
 356:	50 e4       	ldi	r21, 0x40	; 64
 358:	51 d3       	rcall	.+1698   	; 0x9fc <__divsf3>
 35a:	96 d3       	rcall	.+1836   	; 0xa88 <__fixsfsi>
 35c:	7f 93       	push	r23
 35e:	6f 93       	push	r22
 360:	bf 92       	push	r11
 362:	af 92       	push	r10
 364:	df 92       	push	r13
 366:	cf 92       	push	r12
 368:	4e d0       	rcall	.+156    	; 0x406 <sprintf>
lcd_puts(buffer);
 36a:	c6 01       	movw	r24, r12
 36c:	0c df       	rcall	.-488    	; 0x186 <lcd_puts>

lcd_gotoxy(11,1);
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	8b e0       	ldi	r24, 0x0B	; 11
 372:	e7 de       	rcall	.-562    	; 0x142 <lcd_gotoxy>
x=ReadADC(3);
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	5f df       	rcall	.-322    	; 0x236 <ReadADC>
 378:	ec 01       	movw	r28, r24
y=(300 - x)/3.0;
sprintf(buffer,"%4d",y);
 37a:	e8 1a       	sub	r14, r24
 37c:	f9 0a       	sbc	r15, r25
 37e:	00 27       	eor	r16, r16
 380:	f7 fc       	sbrc	r15, 7
 382:	00 95       	com	r16
 384:	10 2f       	mov	r17, r16
 386:	c8 01       	movw	r24, r16
 388:	b7 01       	movw	r22, r14
 38a:	9b d3       	rcall	.+1846   	; 0xac2 <__floatsisf>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e4       	ldi	r20, 0x40	; 64
 392:	50 e4       	ldi	r21, 0x40	; 64
 394:	33 d3       	rcall	.+1638   	; 0x9fc <__divsf3>
 396:	78 d3       	rcall	.+1776   	; 0xa88 <__fixsfsi>
 398:	7f 93       	push	r23
 39a:	6f 93       	push	r22
 39c:	bf 92       	push	r11
 39e:	af 92       	push	r10
 3a0:	df 92       	push	r13
 3a2:	cf 92       	push	r12
 3a4:	30 d0       	rcall	.+96     	; 0x406 <sprintf>
lcd_puts(buffer);
 3a6:	c6 01       	movw	r24, r12
 3a8:	ee de       	rcall	.-548    	; 0x186 <lcd_puts>

if(x>=0&&x<60)
 3aa:	8d b7       	in	r24, 0x3d	; 61
 3ac:	9e b7       	in	r25, 0x3e	; 62
 3ae:	48 96       	adiw	r24, 0x18	; 24
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	9e bf       	out	0x3e, r25	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	8d bf       	out	0x3d, r24	; 61
 3ba:	cc 33       	cpi	r28, 0x3C	; 60
 3bc:	d1 05       	cpc	r29, r1
 3be:	10 f4       	brcc	.+4      	; 0x3c4 <main+0x16c>
PORTB=0b00000001;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	88 bb       	out	0x18, r24	; 24
if(x>=60&&x<70)
 3c4:	ce 01       	movw	r24, r28
 3c6:	cc 97       	sbiw	r24, 0x3c	; 60
 3c8:	0a 97       	sbiw	r24, 0x0a	; 10
 3ca:	10 f4       	brcc	.+4      	; 0x3d0 <main+0x178>
PORTB=0b00000011;
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	88 bb       	out	0x18, r24	; 24
if(x>=70&&x<80)
 3d0:	ce 01       	movw	r24, r28
 3d2:	86 54       	subi	r24, 0x46	; 70
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	0a 97       	sbiw	r24, 0x0a	; 10
 3d8:	10 f4       	brcc	.+4      	; 0x3de <main+0x186>
PORTB=0b00000111;
 3da:	87 e0       	ldi	r24, 0x07	; 7
 3dc:	88 bb       	out	0x18, r24	; 24
if(x>=80&&x<90)
 3de:	ce 01       	movw	r24, r28
 3e0:	80 55       	subi	r24, 0x50	; 80
 3e2:	90 40       	sbci	r25, 0x00	; 0
 3e4:	0a 97       	sbiw	r24, 0x0a	; 10
 3e6:	10 f4       	brcc	.+4      	; 0x3ec <main+0x194>
PORTB=0b00001111;
 3e8:	8f e0       	ldi	r24, 0x0F	; 15
 3ea:	88 bb       	out	0x18, r24	; 24
if(x>=90&&x<100)
 3ec:	ce 01       	movw	r24, r28
 3ee:	8a 55       	subi	r24, 0x5A	; 90
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	0a 97       	sbiw	r24, 0x0a	; 10
 3f4:	10 f4       	brcc	.+4      	; 0x3fa <main+0x1a2>
PORTB=0b00011111;
 3f6:	8f e1       	ldi	r24, 0x1F	; 31
 3f8:	88 bb       	out	0x18, r24	; 24
if(x>=100)
 3fa:	c4 36       	cpi	r28, 0x64	; 100
 3fc:	d1 05       	cpc	r29, r1
 3fe:	0c f4       	brge	.+2      	; 0x402 <main+0x1aa>
 400:	56 cf       	rjmp	.-340    	; 0x2ae <main+0x56>
PORTB=0b00000000;
 402:	18 ba       	out	0x18, r1	; 24
 404:	54 cf       	rjmp	.-344    	; 0x2ae <main+0x56>

00000406 <sprintf>:
 406:	a0 e1       	ldi	r26, 0x10	; 16
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e8 e0       	ldi	r30, 0x08	; 8
 40c:	f2 e0       	ldi	r31, 0x02	; 2
 40e:	e1 c3       	rjmp	.+1986   	; 0xbd2 <__prologue_saves__+0x1c>
 410:	0f 89       	ldd	r16, Y+23	; 0x17
 412:	18 8d       	ldd	r17, Y+24	; 0x18
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	8e 83       	std	Y+6, r24	; 0x06
 418:	1c 83       	std	Y+4, r17	; 0x04
 41a:	0b 83       	std	Y+3, r16	; 0x03
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	9f e7       	ldi	r25, 0x7F	; 127
 420:	98 87       	std	Y+8, r25	; 0x08
 422:	8f 83       	std	Y+7, r24	; 0x07
 424:	ae 01       	movw	r20, r28
 426:	45 5e       	subi	r20, 0xE5	; 229
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	5a 83       	std	Y+2, r21	; 0x02
 42c:	49 83       	std	Y+1, r20	; 0x01
 42e:	69 8d       	ldd	r22, Y+25	; 0x19
 430:	7a 8d       	ldd	r23, Y+26	; 0x1a
 432:	ce 01       	movw	r24, r28
 434:	03 96       	adiw	r24, 0x03	; 3
 436:	09 d0       	rcall	.+18     	; 0x44a <vfprintf>
 438:	29 85       	ldd	r18, Y+9	; 0x09
 43a:	3a 85       	ldd	r19, Y+10	; 0x0a
 43c:	02 0f       	add	r16, r18
 43e:	13 1f       	adc	r17, r19
 440:	f8 01       	movw	r30, r16
 442:	10 82       	st	Z, r1
 444:	e4 e0       	ldi	r30, 0x04	; 4
 446:	60 96       	adiw	r28, 0x10	; 16
 448:	e0 c3       	rjmp	.+1984   	; 0xc0a <__epilogue_restores__+0x1c>

0000044a <vfprintf>:
 44a:	a4 e1       	ldi	r26, 0x14	; 20
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	ea e2       	ldi	r30, 0x2A	; 42
 450:	f2 e0       	ldi	r31, 0x02	; 2
 452:	b1 c3       	rjmp	.+1890   	; 0xbb6 <__prologue_saves__>
 454:	cc 24       	eor	r12, r12
 456:	dd 24       	eor	r13, r13
 458:	76 01       	movw	r14, r12
 45a:	1c 01       	movw	r2, r24
 45c:	7c 8b       	std	Y+20, r23	; 0x14
 45e:	6b 8b       	std	Y+19, r22	; 0x13
 460:	2a 01       	movw	r4, r20
 462:	fc 01       	movw	r30, r24
 464:	17 82       	std	Z+7, r1	; 0x07
 466:	16 82       	std	Z+6, r1	; 0x06
 468:	83 81       	ldd	r24, Z+3	; 0x03
 46a:	81 fd       	sbrc	r24, 1
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__stack+0x15>
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	75 c2       	rjmp	.+1258   	; 0x95e <__stack+0x4ff>
 474:	aa 24       	eor	r10, r10
 476:	bb 24       	eor	r11, r11
 478:	5f c2       	rjmp	.+1214   	; 0x938 <__stack+0x4d9>
 47a:	a0 fe       	sbrs	r10, 0
 47c:	45 c2       	rjmp	.+1162   	; 0x908 <__stack+0x4a9>
 47e:	8a 89       	ldd	r24, Y+18	; 0x12
 480:	80 53       	subi	r24, 0x30	; 48
 482:	8a 30       	cpi	r24, 0x0A	; 10
 484:	e8 f4       	brcc	.+58     	; 0x4c0 <__stack+0x61>
 486:	fa 89       	ldd	r31, Y+18	; 0x12
 488:	f0 33       	cpi	r31, 0x30	; 48
 48a:	41 f4       	brne	.+16     	; 0x49c <__stack+0x3d>
 48c:	2d 85       	ldd	r18, Y+13	; 0x0d
 48e:	22 23       	and	r18, r18
 490:	29 f4       	brne	.+10     	; 0x49c <__stack+0x3d>
 492:	a3 fc       	sbrc	r10, 3
 494:	03 c0       	rjmp	.+6      	; 0x49c <__stack+0x3d>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	6f c0       	rjmp	.+222    	; 0x57a <__stack+0x11b>
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	ed 85       	ldd	r30, Y+13	; 0x0d
 4a0:	e8 02       	muls	r30, r24
 4a2:	c0 01       	movw	r24, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	fa 89       	ldd	r31, Y+18	; 0x12
 4a8:	f8 0f       	add	r31, r24
 4aa:	f0 53       	subi	r31, 0x30	; 48
 4ac:	fd 87       	std	Y+13, r31	; 0x0d
 4ae:	f7 ff       	sbrs	r31, 7
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__stack+0x57>
 4b2:	2f e7       	ldi	r18, 0x7F	; 127
 4b4:	2d 87       	std	Y+13, r18	; 0x0d
 4b6:	a3 fc       	sbrc	r10, 3
 4b8:	39 c2       	rjmp	.+1138   	; 0x92c <__stack+0x4cd>
 4ba:	3d 85       	ldd	r19, Y+13	; 0x0d
 4bc:	3e 87       	std	Y+14, r19	; 0x0e
 4be:	36 c2       	rjmp	.+1132   	; 0x92c <__stack+0x4cd>
 4c0:	c5 01       	movw	r24, r10
 4c2:	88 70       	andi	r24, 0x08	; 8
 4c4:	90 70       	andi	r25, 0x00	; 0
 4c6:	a3 fe       	sbrs	r10, 3
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__stack+0x75>
 4ca:	ed 85       	ldd	r30, Y+13	; 0x0d
 4cc:	ee 23       	and	r30, r30
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__stack+0x75>
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	fd 87       	std	Y+13, r31	; 0x0d
 4d4:	2a 89       	ldd	r18, Y+18	; 0x12
 4d6:	28 36       	cpi	r18, 0x68	; 104
 4d8:	24 f5       	brge	.+72     	; 0x522 <__stack+0xc3>
 4da:	25 36       	cpi	r18, 0x65	; 101
 4dc:	0c f0       	brlt	.+2      	; 0x4e0 <__stack+0x81>
 4de:	5b c0       	rjmp	.+182    	; 0x596 <__stack+0x137>
 4e0:	23 35       	cpi	r18, 0x53	; 83
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <__stack+0x87>
 4e4:	7f c0       	rjmp	.+254    	; 0x5e4 <__stack+0x185>
 4e6:	24 35       	cpi	r18, 0x54	; 84
 4e8:	8c f4       	brge	.+34     	; 0x50c <__stack+0xad>
 4ea:	2b 32       	cpi	r18, 0x2B	; 43
 4ec:	c1 f1       	breq	.+112    	; 0x55e <__stack+0xff>
 4ee:	2c 32       	cpi	r18, 0x2C	; 44
 4f0:	34 f4       	brge	.+12     	; 0x4fe <__stack+0x9f>
 4f2:	20 32       	cpi	r18, 0x20	; 32
 4f4:	c1 f1       	breq	.+112    	; 0x566 <__stack+0x107>
 4f6:	23 32       	cpi	r18, 0x23	; 35
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__stack+0x9d>
 4fa:	fc c1       	rjmp	.+1016   	; 0x8f4 <__stack+0x495>
 4fc:	3c c0       	rjmp	.+120    	; 0x576 <__stack+0x117>
 4fe:	3a 89       	ldd	r19, Y+18	; 0x12
 500:	3d 32       	cpi	r19, 0x2D	; 45
 502:	b1 f1       	breq	.+108    	; 0x570 <__stack+0x111>
 504:	3e 32       	cpi	r19, 0x2E	; 46
 506:	09 f0       	breq	.+2      	; 0x50a <__stack+0xab>
 508:	f5 c1       	rjmp	.+1002   	; 0x8f4 <__stack+0x495>
 50a:	3a c0       	rjmp	.+116    	; 0x580 <__stack+0x121>
 50c:	8a 89       	ldd	r24, Y+18	; 0x12
 50e:	83 36       	cpi	r24, 0x63	; 99
 510:	09 f4       	brne	.+2      	; 0x514 <__stack+0xb5>
 512:	49 c0       	rjmp	.+146    	; 0x5a6 <__stack+0x147>
 514:	84 36       	cpi	r24, 0x64	; 100
 516:	0c f0       	brlt	.+2      	; 0x51a <__stack+0xbb>
 518:	7e c0       	rjmp	.+252    	; 0x616 <__stack+0x1b7>
 51a:	88 35       	cpi	r24, 0x58	; 88
 51c:	09 f0       	breq	.+2      	; 0x520 <__stack+0xc1>
 51e:	ea c1       	rjmp	.+980    	; 0x8f4 <__stack+0x495>
 520:	1b c0       	rjmp	.+54     	; 0x558 <__stack+0xf9>
 522:	ea 89       	ldd	r30, Y+18	; 0x12
 524:	e0 37       	cpi	r30, 0x70	; 112
 526:	09 f4       	brne	.+2      	; 0x52a <__stack+0xcb>
 528:	a0 c0       	rjmp	.+320    	; 0x66a <__stack+0x20b>
 52a:	e1 37       	cpi	r30, 0x71	; 113
 52c:	44 f4       	brge	.+16     	; 0x53e <__stack+0xdf>
 52e:	ec 36       	cpi	r30, 0x6C	; 108
 530:	69 f1       	breq	.+90     	; 0x58c <__stack+0x12d>
 532:	ef 36       	cpi	r30, 0x6F	; 111
 534:	71 f0       	breq	.+28     	; 0x552 <__stack+0xf3>
 536:	e9 36       	cpi	r30, 0x69	; 105
 538:	09 f0       	breq	.+2      	; 0x53c <__stack+0xdd>
 53a:	dc c1       	rjmp	.+952    	; 0x8f4 <__stack+0x495>
 53c:	6c c0       	rjmp	.+216    	; 0x616 <__stack+0x1b7>
 53e:	fa 89       	ldd	r31, Y+18	; 0x12
 540:	f5 37       	cpi	r31, 0x75	; 117
 542:	09 f4       	brne	.+2      	; 0x546 <__stack+0xe7>
 544:	9a c0       	rjmp	.+308    	; 0x67a <__stack+0x21b>
 546:	f8 37       	cpi	r31, 0x78	; 120
 548:	39 f0       	breq	.+14     	; 0x558 <__stack+0xf9>
 54a:	f3 37       	cpi	r31, 0x73	; 115
 54c:	09 f0       	breq	.+2      	; 0x550 <__stack+0xf1>
 54e:	d2 c1       	rjmp	.+932    	; 0x8f4 <__stack+0x495>
 550:	34 c0       	rjmp	.+104    	; 0x5ba <__stack+0x15b>
 552:	28 e0       	ldi	r18, 0x08	; 8
 554:	29 8b       	std	Y+17, r18	; 0x11
 556:	91 c0       	rjmp	.+290    	; 0x67a <__stack+0x21b>
 558:	30 e1       	ldi	r19, 0x10	; 16
 55a:	39 8b       	std	Y+17, r19	; 0x11
 55c:	8e c0       	rjmp	.+284    	; 0x67a <__stack+0x21b>
 55e:	80 e1       	ldi	r24, 0x10	; 16
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a8 2a       	or	r10, r24
 564:	b9 2a       	or	r11, r25
 566:	e0 e2       	ldi	r30, 0x20	; 32
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	ae 2a       	or	r10, r30
 56c:	bf 2a       	or	r11, r31
 56e:	de c1       	rjmp	.+956    	; 0x92c <__stack+0x4cd>
 570:	20 e8       	ldi	r18, 0x80	; 128
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	0d c0       	rjmp	.+26     	; 0x590 <__stack+0x131>
 576:	80 e4       	ldi	r24, 0x40	; 64
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	a8 2a       	or	r10, r24
 57c:	b9 2a       	or	r11, r25
 57e:	d6 c1       	rjmp	.+940    	; 0x92c <__stack+0x4cd>
 580:	e8 e0       	ldi	r30, 0x08	; 8
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ae 2a       	or	r10, r30
 586:	bf 2a       	or	r11, r31
 588:	1d 86       	std	Y+13, r1	; 0x0d
 58a:	d0 c1       	rjmp	.+928    	; 0x92c <__stack+0x4cd>
 58c:	24 e0       	ldi	r18, 0x04	; 4
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	a2 2a       	or	r10, r18
 592:	b3 2a       	or	r11, r19
 594:	cb c1       	rjmp	.+918    	; 0x92c <__stack+0x4cd>
 596:	4f e3       	ldi	r20, 0x3F	; 63
 598:	c4 2e       	mov	r12, r20
 59a:	3e 85       	ldd	r19, Y+14	; 0x0e
 59c:	31 50       	subi	r19, 0x01	; 1
 59e:	3e 87       	std	Y+14, r19	; 0x0e
 5a0:	83 e6       	ldi	r24, 0x63	; 99
 5a2:	8a 8b       	std	Y+18, r24	; 0x12
 5a4:	39 c1       	rjmp	.+626    	; 0x818 <__stack+0x3b9>
 5a6:	f2 01       	movw	r30, r4
 5a8:	c0 80       	ld	r12, Z
 5aa:	fe 85       	ldd	r31, Y+14	; 0x0e
 5ac:	f1 50       	subi	r31, 0x01	; 1
 5ae:	fe 87       	std	Y+14, r31	; 0x0e
 5b0:	22 e0       	ldi	r18, 0x02	; 2
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	42 0e       	add	r4, r18
 5b6:	53 1e       	adc	r5, r19
 5b8:	2f c1       	rjmp	.+606    	; 0x818 <__stack+0x3b9>
 5ba:	f2 01       	movw	r30, r4
 5bc:	c0 80       	ld	r12, Z
 5be:	d1 80       	ldd	r13, Z+1	; 0x01
 5c0:	89 2b       	or	r24, r25
 5c2:	41 f0       	breq	.+16     	; 0x5d4 <__stack+0x175>
 5c4:	fd 85       	ldd	r31, Y+13	; 0x0d
 5c6:	6f 2f       	mov	r22, r31
 5c8:	77 27       	eor	r23, r23
 5ca:	67 fd       	sbrc	r22, 7
 5cc:	70 95       	com	r23
 5ce:	c6 01       	movw	r24, r12
 5d0:	dd d1       	rcall	.+954    	; 0x98c <strnlen>
 5d2:	17 c0       	rjmp	.+46     	; 0x602 <__stack+0x1a3>
 5d4:	f6 01       	movw	r30, r12
 5d6:	01 90       	ld	r0, Z+
 5d8:	00 20       	and	r0, r0
 5da:	e9 f7       	brne	.-6      	; 0x5d6 <__stack+0x177>
 5dc:	31 97       	sbiw	r30, 0x01	; 1
 5de:	ec 19       	sub	r30, r12
 5e0:	e9 8b       	std	Y+17, r30	; 0x11
 5e2:	10 c0       	rjmp	.+32     	; 0x604 <__stack+0x1a5>
 5e4:	f2 01       	movw	r30, r4
 5e6:	c0 80       	ld	r12, Z
 5e8:	d1 80       	ldd	r13, Z+1	; 0x01
 5ea:	89 2b       	or	r24, r25
 5ec:	41 f0       	breq	.+16     	; 0x5fe <__stack+0x19f>
 5ee:	fd 85       	ldd	r31, Y+13	; 0x0d
 5f0:	6f 2f       	mov	r22, r31
 5f2:	77 27       	eor	r23, r23
 5f4:	67 fd       	sbrc	r22, 7
 5f6:	70 95       	com	r23
 5f8:	c6 01       	movw	r24, r12
 5fa:	bd d1       	rcall	.+890    	; 0x976 <strnlen_P>
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <__stack+0x1a3>
 5fe:	c6 01       	movw	r24, r12
 600:	b1 d1       	rcall	.+866    	; 0x964 <strlen_P>
 602:	89 8b       	std	Y+17, r24	; 0x11
 604:	22 e0       	ldi	r18, 0x02	; 2
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	42 0e       	add	r4, r18
 60a:	53 1e       	adc	r5, r19
 60c:	3e 85       	ldd	r19, Y+14	; 0x0e
 60e:	89 89       	ldd	r24, Y+17	; 0x11
 610:	38 1b       	sub	r19, r24
 612:	3e 87       	std	Y+14, r19	; 0x0e
 614:	01 c1       	rjmp	.+514    	; 0x818 <__stack+0x3b9>
 616:	a2 fe       	sbrs	r10, 2
 618:	08 c0       	rjmp	.+16     	; 0x62a <__stack+0x1cb>
 61a:	f2 01       	movw	r30, r4
 61c:	80 81       	ld	r24, Z
 61e:	91 81       	ldd	r25, Z+1	; 0x01
 620:	a2 81       	ldd	r26, Z+2	; 0x02
 622:	b3 81       	ldd	r27, Z+3	; 0x03
 624:	24 e0       	ldi	r18, 0x04	; 4
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	09 c0       	rjmp	.+18     	; 0x63c <__stack+0x1dd>
 62a:	f2 01       	movw	r30, r4
 62c:	80 81       	ld	r24, Z
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	aa 27       	eor	r26, r26
 632:	97 fd       	sbrc	r25, 7
 634:	a0 95       	com	r26
 636:	ba 2f       	mov	r27, r26
 638:	22 e0       	ldi	r18, 0x02	; 2
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	42 0e       	add	r4, r18
 63e:	53 1e       	adc	r5, r19
 640:	6c 01       	movw	r12, r24
 642:	7d 01       	movw	r14, r26
 644:	b7 ff       	sbrs	r27, 7
 646:	0c c0       	rjmp	.+24     	; 0x660 <__stack+0x201>
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	a8 2a       	or	r10, r24
 64e:	b9 2a       	or	r11, r25
 650:	f0 94       	com	r15
 652:	e0 94       	com	r14
 654:	d0 94       	com	r13
 656:	c0 94       	com	r12
 658:	c1 1c       	adc	r12, r1
 65a:	d1 1c       	adc	r13, r1
 65c:	e1 1c       	adc	r14, r1
 65e:	f1 1c       	adc	r15, r1
 660:	ef eb       	ldi	r30, 0xBF	; 191
 662:	ff ef       	ldi	r31, 0xFF	; 255
 664:	ae 22       	and	r10, r30
 666:	bf 22       	and	r11, r31
 668:	21 c0       	rjmp	.+66     	; 0x6ac <__stack+0x24d>
 66a:	20 e4       	ldi	r18, 0x40	; 64
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	a2 2a       	or	r10, r18
 670:	b3 2a       	or	r11, r19
 672:	38 e7       	ldi	r19, 0x78	; 120
 674:	3a 8b       	std	Y+18, r19	; 0x12
 676:	80 e1       	ldi	r24, 0x10	; 16
 678:	89 8b       	std	Y+17, r24	; 0x11
 67a:	a2 fe       	sbrs	r10, 2
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__stack+0x22f>
 67e:	f2 01       	movw	r30, r4
 680:	80 81       	ld	r24, Z
 682:	91 81       	ldd	r25, Z+1	; 0x01
 684:	a2 81       	ldd	r26, Z+2	; 0x02
 686:	b3 81       	ldd	r27, Z+3	; 0x03
 688:	24 e0       	ldi	r18, 0x04	; 4
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	07 c0       	rjmp	.+14     	; 0x69c <__stack+0x23d>
 68e:	f2 01       	movw	r30, r4
 690:	80 81       	ld	r24, Z
 692:	91 81       	ldd	r25, Z+1	; 0x01
 694:	aa 27       	eor	r26, r26
 696:	bb 27       	eor	r27, r27
 698:	22 e0       	ldi	r18, 0x02	; 2
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	42 0e       	add	r4, r18
 69e:	53 1e       	adc	r5, r19
 6a0:	6c 01       	movw	r12, r24
 6a2:	7d 01       	movw	r14, r26
 6a4:	8f ec       	ldi	r24, 0xCF	; 207
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	a8 22       	and	r10, r24
 6aa:	b9 22       	and	r11, r25
 6ac:	87 01       	movw	r16, r14
 6ae:	76 01       	movw	r14, r12
 6b0:	fe 01       	movw	r30, r28
 6b2:	31 96       	adiw	r30, 0x01	; 1
 6b4:	f8 8b       	std	Y+16, r31	; 0x10
 6b6:	ef 87       	std	Y+15, r30	; 0x0f
 6b8:	f9 89       	ldd	r31, Y+17	; 0x11
 6ba:	6f 2e       	mov	r6, r31
 6bc:	77 24       	eor	r7, r7
 6be:	88 24       	eor	r8, r8
 6c0:	99 24       	eor	r9, r9
 6c2:	c8 01       	movw	r24, r16
 6c4:	b7 01       	movw	r22, r14
 6c6:	a4 01       	movw	r20, r8
 6c8:	93 01       	movw	r18, r6
 6ca:	53 d2       	rcall	.+1190   	; 0xb72 <__udivmodsi4>
 6cc:	6a 30       	cpi	r22, 0x0A	; 10
 6ce:	24 f0       	brlt	.+8      	; 0x6d8 <__stack+0x279>
 6d0:	2a 89       	ldd	r18, Y+18	; 0x12
 6d2:	62 0f       	add	r22, r18
 6d4:	61 52       	subi	r22, 0x21	; 33
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <__stack+0x27b>
 6d8:	60 5d       	subi	r22, 0xD0	; 208
 6da:	ef 85       	ldd	r30, Y+15	; 0x0f
 6dc:	f8 89       	ldd	r31, Y+16	; 0x10
 6de:	61 93       	st	Z+, r22
 6e0:	f8 8b       	std	Y+16, r31	; 0x10
 6e2:	ef 87       	std	Y+15, r30	; 0x0f
 6e4:	c8 01       	movw	r24, r16
 6e6:	b7 01       	movw	r22, r14
 6e8:	a4 01       	movw	r20, r8
 6ea:	93 01       	movw	r18, r6
 6ec:	42 d2       	rcall	.+1156   	; 0xb72 <__udivmodsi4>
 6ee:	79 01       	movw	r14, r18
 6f0:	8a 01       	movw	r16, r20
 6f2:	21 15       	cp	r18, r1
 6f4:	31 05       	cpc	r19, r1
 6f6:	41 05       	cpc	r20, r1
 6f8:	51 05       	cpc	r21, r1
 6fa:	19 f7       	brne	.-58     	; 0x6c2 <__stack+0x263>
 6fc:	cc 24       	eor	r12, r12
 6fe:	dd 24       	eor	r13, r13
 700:	76 01       	movw	r14, r12
 702:	ce 01       	movw	r24, r28
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	cf 84       	ldd	r12, Y+15	; 0x0f
 708:	c8 1a       	sub	r12, r24
 70a:	c5 01       	movw	r24, r10
 70c:	82 73       	andi	r24, 0x32	; 50
 70e:	90 70       	andi	r25, 0x00	; 0
 710:	89 2b       	or	r24, r25
 712:	19 f0       	breq	.+6      	; 0x71a <__stack+0x2bb>
 714:	fe 85       	ldd	r31, Y+14	; 0x0e
 716:	f1 50       	subi	r31, 0x01	; 1
 718:	fe 87       	std	Y+14, r31	; 0x0e
 71a:	a6 fe       	sbrs	r10, 6
 71c:	09 c0       	rjmp	.+18     	; 0x730 <__stack+0x2d1>
 71e:	29 89       	ldd	r18, Y+17	; 0x11
 720:	20 31       	cpi	r18, 0x10	; 16
 722:	11 f4       	brne	.+4      	; 0x728 <__stack+0x2c9>
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	01 c0       	rjmp	.+2      	; 0x72a <__stack+0x2cb>
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	3e 85       	ldd	r19, Y+14	; 0x0e
 72c:	38 1b       	sub	r19, r24
 72e:	3e 87       	std	Y+14, r19	; 0x0e
 730:	38 e0       	ldi	r19, 0x08	; 8
 732:	83 2e       	mov	r8, r19
 734:	91 2c       	mov	r9, r1
 736:	8a 20       	and	r8, r10
 738:	9b 20       	and	r9, r11
 73a:	a3 fe       	sbrs	r10, 3
 73c:	1b c0       	rjmp	.+54     	; 0x774 <__stack+0x315>
 73e:	8d 85       	ldd	r24, Y+13	; 0x0d
 740:	28 2f       	mov	r18, r24
 742:	33 27       	eor	r19, r19
 744:	27 fd       	sbrc	r18, 7
 746:	30 95       	com	r19
 748:	8c 2d       	mov	r24, r12
 74a:	99 27       	eor	r25, r25
 74c:	82 17       	cp	r24, r18
 74e:	93 07       	cpc	r25, r19
 750:	54 f0       	brlt	.+20     	; 0x766 <__stack+0x307>
 752:	e7 ef       	ldi	r30, 0xF7	; 247
 754:	ff ef       	ldi	r31, 0xFF	; 255
 756:	ae 22       	and	r10, r30
 758:	bf 22       	and	r11, r31
 75a:	28 e0       	ldi	r18, 0x08	; 8
 75c:	82 2e       	mov	r8, r18
 75e:	91 2c       	mov	r9, r1
 760:	8a 20       	and	r8, r10
 762:	9b 20       	and	r9, r11
 764:	07 c0       	rjmp	.+14     	; 0x774 <__stack+0x315>
 766:	fd 85       	ldd	r31, Y+13	; 0x0d
 768:	fc 19       	sub	r31, r12
 76a:	fd 87       	std	Y+13, r31	; 0x0d
 76c:	2e 85       	ldd	r18, Y+14	; 0x0e
 76e:	2f 1b       	sub	r18, r31
 770:	2e 87       	std	Y+14, r18	; 0x0e
 772:	03 c0       	rjmp	.+6      	; 0x77a <__stack+0x31b>
 774:	3e 85       	ldd	r19, Y+14	; 0x0e
 776:	3c 19       	sub	r19, r12
 778:	3e 87       	std	Y+14, r19	; 0x0e
 77a:	c5 01       	movw	r24, r10
 77c:	80 78       	andi	r24, 0x80	; 128
 77e:	91 70       	andi	r25, 0x01	; 1
 780:	89 2b       	or	r24, r25
 782:	61 f4       	brne	.+24     	; 0x79c <__stack+0x33d>
 784:	8e 85       	ldd	r24, Y+14	; 0x0e
 786:	05 c0       	rjmp	.+10     	; 0x792 <__stack+0x333>
 788:	b1 01       	movw	r22, r2
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	09 d1       	rcall	.+530    	; 0x9a2 <fputc>
 790:	81 2f       	mov	r24, r17
 792:	18 2f       	mov	r17, r24
 794:	11 50       	subi	r17, 0x01	; 1
 796:	18 16       	cp	r1, r24
 798:	bc f3       	brlt	.-18     	; 0x788 <__stack+0x329>
 79a:	1e 87       	std	Y+14, r17	; 0x0e
 79c:	a1 fe       	sbrs	r10, 1
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <__stack+0x349>
 7a0:	b1 01       	movw	r22, r2
 7a2:	8d e2       	ldi	r24, 0x2D	; 45
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0b c0       	rjmp	.+22     	; 0x7be <__stack+0x35f>
 7a8:	a4 fe       	sbrs	r10, 4
 7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__stack+0x355>
 7ac:	b1 01       	movw	r22, r2
 7ae:	8b e2       	ldi	r24, 0x2B	; 43
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <__stack+0x35f>
 7b4:	a5 fe       	sbrs	r10, 5
 7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <__stack+0x361>
 7b8:	b1 01       	movw	r22, r2
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	f1 d0       	rcall	.+482    	; 0x9a2 <fputc>
 7c0:	a6 fe       	sbrs	r10, 6
 7c2:	0e c0       	rjmp	.+28     	; 0x7e0 <__stack+0x381>
 7c4:	b1 01       	movw	r22, r2
 7c6:	80 e3       	ldi	r24, 0x30	; 48
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	eb d0       	rcall	.+470    	; 0x9a2 <fputc>
 7cc:	89 89       	ldd	r24, Y+17	; 0x11
 7ce:	80 31       	cpi	r24, 0x10	; 16
 7d0:	39 f4       	brne	.+14     	; 0x7e0 <__stack+0x381>
 7d2:	b1 01       	movw	r22, r2
 7d4:	ea 89       	ldd	r30, Y+18	; 0x12
 7d6:	8e 2f       	mov	r24, r30
 7d8:	99 27       	eor	r25, r25
 7da:	87 fd       	sbrc	r24, 7
 7dc:	90 95       	com	r25
 7de:	e1 d0       	rcall	.+450    	; 0x9a2 <fputc>
 7e0:	b0 fe       	sbrs	r11, 0
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <__stack+0x39d>
 7e4:	8e 85       	ldd	r24, Y+14	; 0x0e
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <__stack+0x393>
 7e8:	b1 01       	movw	r22, r2
 7ea:	80 e3       	ldi	r24, 0x30	; 48
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	d9 d0       	rcall	.+434    	; 0x9a2 <fputc>
 7f0:	81 2f       	mov	r24, r17
 7f2:	18 2f       	mov	r17, r24
 7f4:	11 50       	subi	r17, 0x01	; 1
 7f6:	18 16       	cp	r1, r24
 7f8:	bc f3       	brlt	.-18     	; 0x7e8 <__stack+0x389>
 7fa:	1e 87       	std	Y+14, r17	; 0x0e
 7fc:	89 28       	or	r8, r9
 7fe:	61 f0       	breq	.+24     	; 0x818 <__stack+0x3b9>
 800:	2d 85       	ldd	r18, Y+13	; 0x0d
 802:	05 c0       	rjmp	.+10     	; 0x80e <__stack+0x3af>
 804:	b1 01       	movw	r22, r2
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	cb d0       	rcall	.+406    	; 0x9a2 <fputc>
 80c:	21 2f       	mov	r18, r17
 80e:	12 2f       	mov	r17, r18
 810:	11 50       	subi	r17, 0x01	; 1
 812:	12 16       	cp	r1, r18
 814:	bc f3       	brlt	.-18     	; 0x804 <__stack+0x3a5>
 816:	1d 87       	std	Y+13, r17	; 0x0d
 818:	90 e8       	ldi	r25, 0x80	; 128
 81a:	69 2e       	mov	r6, r25
 81c:	71 2c       	mov	r7, r1
 81e:	6a 20       	and	r6, r10
 820:	7b 20       	and	r7, r11
 822:	a7 fc       	sbrc	r10, 7
 824:	0c c0       	rjmp	.+24     	; 0x83e <__stack+0x3df>
 826:	8e 85       	ldd	r24, Y+14	; 0x0e
 828:	05 c0       	rjmp	.+10     	; 0x834 <__stack+0x3d5>
 82a:	b1 01       	movw	r22, r2
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	b8 d0       	rcall	.+368    	; 0x9a2 <fputc>
 832:	81 2f       	mov	r24, r17
 834:	18 2f       	mov	r17, r24
 836:	11 50       	subi	r17, 0x01	; 1
 838:	18 16       	cp	r1, r24
 83a:	bc f3       	brlt	.-18     	; 0x82a <__stack+0x3cb>
 83c:	1e 87       	std	Y+14, r17	; 0x0e
 83e:	fa 89       	ldd	r31, Y+18	; 0x12
 840:	f3 36       	cpi	r31, 0x63	; 99
 842:	39 f4       	brne	.+14     	; 0x852 <__stack+0x3f3>
 844:	b1 01       	movw	r22, r2
 846:	8c 2d       	mov	r24, r12
 848:	99 27       	eor	r25, r25
 84a:	87 fd       	sbrc	r24, 7
 84c:	90 95       	com	r25
 84e:	a9 d0       	rcall	.+338    	; 0x9a2 <fputc>
 850:	42 c0       	rjmp	.+132    	; 0x8d6 <__stack+0x477>
 852:	2a 89       	ldd	r18, Y+18	; 0x12
 854:	23 37       	cpi	r18, 0x73	; 115
 856:	a9 f4       	brne	.+42     	; 0x882 <__stack+0x423>
 858:	46 01       	movw	r8, r12
 85a:	56 01       	movw	r10, r12
 85c:	19 89       	ldd	r17, Y+17	; 0x11
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x411>
 860:	f5 01       	movw	r30, r10
 862:	81 91       	ld	r24, Z+
 864:	5f 01       	movw	r10, r30
 866:	b1 01       	movw	r22, r2
 868:	99 27       	eor	r25, r25
 86a:	87 fd       	sbrc	r24, 7
 86c:	90 95       	com	r25
 86e:	99 d0       	rcall	.+306    	; 0x9a2 <fputc>
 870:	11 50       	subi	r17, 0x01	; 1
 872:	b0 f7       	brcc	.-20     	; 0x860 <__stack+0x401>
 874:	64 01       	movw	r12, r8
 876:	f9 89       	ldd	r31, Y+17	; 0x11
 878:	cf 0e       	add	r12, r31
 87a:	d1 1c       	adc	r13, r1
 87c:	2f ef       	ldi	r18, 0xFF	; 255
 87e:	29 8b       	std	Y+17, r18	; 0x11
 880:	2a c0       	rjmp	.+84     	; 0x8d6 <__stack+0x477>
 882:	3a 89       	ldd	r19, Y+18	; 0x12
 884:	33 35       	cpi	r19, 0x53	; 83
 886:	19 f0       	breq	.+6      	; 0x88e <__stack+0x42f>
 888:	0f 85       	ldd	r16, Y+15	; 0x0f
 88a:	18 89       	ldd	r17, Y+16	; 0x10
 88c:	1d c0       	rjmp	.+58     	; 0x8c8 <__stack+0x469>
 88e:	46 01       	movw	r8, r12
 890:	86 01       	movw	r16, r12
 892:	b9 88       	ldd	r11, Y+17	; 0x11
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__stack+0x445>
 896:	f8 01       	movw	r30, r16
 898:	84 91       	lpm	r24, Z
 89a:	b1 01       	movw	r22, r2
 89c:	99 27       	eor	r25, r25
 89e:	81 d0       	rcall	.+258    	; 0x9a2 <fputc>
 8a0:	0f 5f       	subi	r16, 0xFF	; 255
 8a2:	1f 4f       	sbci	r17, 0xFF	; 255
 8a4:	ba 94       	dec	r11
 8a6:	ff ef       	ldi	r31, 0xFF	; 255
 8a8:	bf 16       	cp	r11, r31
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__stack+0x437>
 8ac:	64 01       	movw	r12, r8
 8ae:	29 89       	ldd	r18, Y+17	; 0x11
 8b0:	c2 0e       	add	r12, r18
 8b2:	d1 1c       	adc	r13, r1
 8b4:	f9 8b       	std	Y+17, r31	; 0x11
 8b6:	0f c0       	rjmp	.+30     	; 0x8d6 <__stack+0x477>
 8b8:	f8 01       	movw	r30, r16
 8ba:	82 91       	ld	r24, -Z
 8bc:	8f 01       	movw	r16, r30
 8be:	b1 01       	movw	r22, r2
 8c0:	99 27       	eor	r25, r25
 8c2:	87 fd       	sbrc	r24, 7
 8c4:	90 95       	com	r25
 8c6:	6d d0       	rcall	.+218    	; 0x9a2 <fputc>
 8c8:	ce 01       	movw	r24, r28
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	08 17       	cp	r16, r24
 8ce:	19 07       	cpc	r17, r25
 8d0:	99 f7       	brne	.-26     	; 0x8b8 <__stack+0x459>
 8d2:	18 8b       	std	Y+16, r17	; 0x10
 8d4:	0f 87       	std	Y+15, r16	; 0x0f
 8d6:	67 28       	or	r6, r7
 8d8:	a1 f0       	breq	.+40     	; 0x902 <__stack+0x4a3>
 8da:	8e 85       	ldd	r24, Y+14	; 0x0e
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <__stack+0x489>
 8de:	b1 01       	movw	r22, r2
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	5e d0       	rcall	.+188    	; 0x9a2 <fputc>
 8e6:	81 2f       	mov	r24, r17
 8e8:	18 2f       	mov	r17, r24
 8ea:	11 50       	subi	r17, 0x01	; 1
 8ec:	18 16       	cp	r1, r24
 8ee:	bc f3       	brlt	.-18     	; 0x8de <__stack+0x47f>
 8f0:	1e 87       	std	Y+14, r17	; 0x0e
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__stack+0x4a3>
 8f4:	b1 01       	movw	r22, r2
 8f6:	fa 89       	ldd	r31, Y+18	; 0x12
 8f8:	8f 2f       	mov	r24, r31
 8fa:	99 27       	eor	r25, r25
 8fc:	87 fd       	sbrc	r24, 7
 8fe:	90 95       	com	r25
 900:	50 d0       	rcall	.+160    	; 0x9a2 <fputc>
 902:	aa 24       	eor	r10, r10
 904:	bb 24       	eor	r11, r11
 906:	12 c0       	rjmp	.+36     	; 0x92c <__stack+0x4cd>
 908:	2a 89       	ldd	r18, Y+18	; 0x12
 90a:	25 32       	cpi	r18, 0x25	; 37
 90c:	41 f4       	brne	.+16     	; 0x91e <__stack+0x4bf>
 90e:	3a e0       	ldi	r19, 0x0A	; 10
 910:	39 8b       	std	Y+17, r19	; 0x11
 912:	1e 86       	std	Y+14, r1	; 0x0e
 914:	1d 86       	std	Y+13, r1	; 0x0d
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	a8 2e       	mov	r10, r24
 91a:	b1 2c       	mov	r11, r1
 91c:	07 c0       	rjmp	.+14     	; 0x92c <__stack+0x4cd>
 91e:	b1 01       	movw	r22, r2
 920:	ea 89       	ldd	r30, Y+18	; 0x12
 922:	8e 2f       	mov	r24, r30
 924:	99 27       	eor	r25, r25
 926:	87 fd       	sbrc	r24, 7
 928:	90 95       	com	r25
 92a:	3b d0       	rcall	.+118    	; 0x9a2 <fputc>
 92c:	2b 89       	ldd	r18, Y+19	; 0x13
 92e:	3c 89       	ldd	r19, Y+20	; 0x14
 930:	2f 5f       	subi	r18, 0xFF	; 255
 932:	3f 4f       	sbci	r19, 0xFF	; 255
 934:	3c 8b       	std	Y+20, r19	; 0x14
 936:	2b 8b       	std	Y+19, r18	; 0x13
 938:	f1 01       	movw	r30, r2
 93a:	83 81       	ldd	r24, Z+3	; 0x03
 93c:	83 ff       	sbrs	r24, 3
 93e:	04 c0       	rjmp	.+8      	; 0x948 <__stack+0x4e9>
 940:	eb 89       	ldd	r30, Y+19	; 0x13
 942:	fc 89       	ldd	r31, Y+20	; 0x14
 944:	f4 91       	lpm	r31, Z
 946:	03 c0       	rjmp	.+6      	; 0x94e <__stack+0x4ef>
 948:	eb 89       	ldd	r30, Y+19	; 0x13
 94a:	fc 89       	ldd	r31, Y+20	; 0x14
 94c:	f0 81       	ld	r31, Z
 94e:	fa 8b       	std	Y+18, r31	; 0x12
 950:	2a 89       	ldd	r18, Y+18	; 0x12
 952:	22 23       	and	r18, r18
 954:	09 f0       	breq	.+2      	; 0x958 <__stack+0x4f9>
 956:	91 cd       	rjmp	.-1246   	; 0x47a <__stack+0x1b>
 958:	f1 01       	movw	r30, r2
 95a:	86 81       	ldd	r24, Z+6	; 0x06
 95c:	97 81       	ldd	r25, Z+7	; 0x07
 95e:	e2 e1       	ldi	r30, 0x12	; 18
 960:	64 96       	adiw	r28, 0x14	; 20
 962:	45 c1       	rjmp	.+650    	; 0xbee <__epilogue_restores__>

00000964 <strlen_P>:
 964:	fc 01       	movw	r30, r24
 966:	05 90       	lpm	r0, Z+
 968:	00 20       	and	r0, r0
 96a:	e9 f7       	brne	.-6      	; 0x966 <strlen_P+0x2>
 96c:	80 95       	com	r24
 96e:	90 95       	com	r25
 970:	8e 0f       	add	r24, r30
 972:	9f 1f       	adc	r25, r31
 974:	08 95       	ret

00000976 <strnlen_P>:
 976:	fc 01       	movw	r30, r24
 978:	05 90       	lpm	r0, Z+
 97a:	61 50       	subi	r22, 0x01	; 1
 97c:	70 40       	sbci	r23, 0x00	; 0
 97e:	01 10       	cpse	r0, r1
 980:	d8 f7       	brcc	.-10     	; 0x978 <strnlen_P+0x2>
 982:	80 95       	com	r24
 984:	90 95       	com	r25
 986:	8e 0f       	add	r24, r30
 988:	9f 1f       	adc	r25, r31
 98a:	08 95       	ret

0000098c <strnlen>:
 98c:	fc 01       	movw	r30, r24
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	01 90       	ld	r0, Z+
 994:	01 10       	cpse	r0, r1
 996:	d8 f7       	brcc	.-10     	; 0x98e <strnlen+0x2>
 998:	80 95       	com	r24
 99a:	90 95       	com	r25
 99c:	8e 0f       	add	r24, r30
 99e:	9f 1f       	adc	r25, r31
 9a0:	08 95       	ret

000009a2 <fputc>:
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	8c 01       	movw	r16, r24
 9ac:	eb 01       	movw	r28, r22
 9ae:	8b 81       	ldd	r24, Y+3	; 0x03
 9b0:	99 27       	eor	r25, r25
 9b2:	81 ff       	sbrs	r24, 1
 9b4:	1b c0       	rjmp	.+54     	; 0x9ec <fputc+0x4a>
 9b6:	82 ff       	sbrs	r24, 2
 9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <fputc+0x32>
 9ba:	2e 81       	ldd	r18, Y+6	; 0x06
 9bc:	3f 81       	ldd	r19, Y+7	; 0x07
 9be:	8c 81       	ldd	r24, Y+4	; 0x04
 9c0:	9d 81       	ldd	r25, Y+5	; 0x05
 9c2:	28 17       	cp	r18, r24
 9c4:	39 07       	cpc	r19, r25
 9c6:	64 f4       	brge	.+24     	; 0x9e0 <fputc+0x3e>
 9c8:	e8 81       	ld	r30, Y
 9ca:	f9 81       	ldd	r31, Y+1	; 0x01
 9cc:	01 93       	st	Z+, r16
 9ce:	f9 83       	std	Y+1, r31	; 0x01
 9d0:	e8 83       	st	Y, r30
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <fputc+0x3e>
 9d4:	e8 85       	ldd	r30, Y+8	; 0x08
 9d6:	f9 85       	ldd	r31, Y+9	; 0x09
 9d8:	80 2f       	mov	r24, r16
 9da:	09 95       	icall
 9dc:	89 2b       	or	r24, r25
 9de:	31 f4       	brne	.+12     	; 0x9ec <fputc+0x4a>
 9e0:	8e 81       	ldd	r24, Y+6	; 0x06
 9e2:	9f 81       	ldd	r25, Y+7	; 0x07
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	9f 83       	std	Y+7, r25	; 0x07
 9e8:	8e 83       	std	Y+6, r24	; 0x06
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <fputc+0x4e>
 9ec:	0f ef       	ldi	r16, 0xFF	; 255
 9ee:	1f ef       	ldi	r17, 0xFF	; 255
 9f0:	c8 01       	movw	r24, r16
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	08 95       	ret

000009fc <__divsf3>:
 9fc:	8c d0       	rcall	.+280    	; 0xb16 <__fp_split3>
 9fe:	01 d0       	rcall	.+2      	; 0xa02 <__divsf3x>
 a00:	6f c0       	rjmp	.+222    	; 0xae0 <__fp_merge>

00000a02 <__divsf3x>:
 a02:	55 23       	and	r21, r21
 a04:	59 f0       	breq	.+22     	; 0xa1c <__divsf3x+0x1a>
 a06:	99 23       	and	r25, r25
 a08:	69 f0       	breq	.+26     	; 0xa24 <__divsf3x+0x22>
 a0a:	9f 57       	subi	r25, 0x7F	; 127
 a0c:	5f 57       	subi	r21, 0x7F	; 127
 a0e:	95 1b       	sub	r25, r21
 a10:	33 f4       	brvc	.+12     	; 0xa1e <__divsf3x+0x1c>
 a12:	42 f4       	brpl	.+16     	; 0xa24 <__divsf3x+0x22>
 a14:	90 38       	cpi	r25, 0x80	; 128
 a16:	11 f4       	brne	.+4      	; 0xa1c <__divsf3x+0x1a>
 a18:	91 58       	subi	r25, 0x81	; 129
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__divsf3x+0x24>
 a1c:	79 c0       	rjmp	.+242    	; 0xb10 <__fp_nan>
 a1e:	91 58       	subi	r25, 0x81	; 129
 a20:	9f 3f       	cpi	r25, 0xFF	; 255
 a22:	09 f4       	brne	.+2      	; 0xa26 <__divsf3x+0x24>
 a24:	a4 c0       	rjmp	.+328    	; 0xb6e <__fp_zerox>
 a26:	bb 27       	eor	r27, r27
 a28:	11 24       	eor	r1, r1
 a2a:	62 17       	cp	r22, r18
 a2c:	73 07       	cpc	r23, r19
 a2e:	84 07       	cpc	r24, r20
 a30:	30 f4       	brcc	.+12     	; 0xa3e <__divsf3x+0x3c>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	bb 1f       	adc	r27, r27
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	98 f3       	brcs	.-26     	; 0xa24 <__divsf3x+0x22>
 a3e:	11 d0       	rcall	.+34     	; 0xa62 <__divsf3x+0x60>
 a40:	0f 92       	push	r0
 a42:	0f d0       	rcall	.+30     	; 0xa62 <__divsf3x+0x60>
 a44:	0f 92       	push	r0
 a46:	0d d0       	rcall	.+26     	; 0xa62 <__divsf3x+0x60>
 a48:	a0 e8       	ldi	r26, 0x80	; 128
 a4a:	26 17       	cp	r18, r22
 a4c:	37 07       	cpc	r19, r23
 a4e:	48 07       	cpc	r20, r24
 a50:	1b 06       	cpc	r1, r27
 a52:	09 f0       	breq	.+2      	; 0xa56 <__divsf3x+0x54>
 a54:	a0 48       	sbci	r26, 0x80	; 128
 a56:	ba 2f       	mov	r27, r26
 a58:	60 2d       	mov	r22, r0
 a5a:	7f 91       	pop	r23
 a5c:	8f 91       	pop	r24
 a5e:	00 24       	eor	r0, r0
 a60:	08 95       	ret
 a62:	a0 e8       	ldi	r26, 0x80	; 128
 a64:	00 24       	eor	r0, r0
 a66:	62 17       	cp	r22, r18
 a68:	73 07       	cpc	r23, r19
 a6a:	84 07       	cpc	r24, r20
 a6c:	b1 05       	cpc	r27, r1
 a6e:	28 f0       	brcs	.+10     	; 0xa7a <__divsf3x+0x78>
 a70:	62 1b       	sub	r22, r18
 a72:	73 0b       	sbc	r23, r19
 a74:	84 0b       	sbc	r24, r20
 a76:	b1 09       	sbc	r27, r1
 a78:	0a 2a       	or	r0, r26
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	bb 1f       	adc	r27, r27
 a82:	a6 95       	lsr	r26
 a84:	81 f7       	brne	.-32     	; 0xa66 <__divsf3x+0x64>
 a86:	08 95       	ret

00000a88 <__fixsfsi>:
 a88:	97 fb       	bst	r25, 7
 a8a:	51 d0       	rcall	.+162    	; 0xb2e <__fp_split1>
 a8c:	9f 37       	cpi	r25, 0x7F	; 127
 a8e:	38 f0       	brcs	.+14     	; 0xa9e <__fixsfsi+0x16>
 a90:	fe e9       	ldi	r31, 0x9E	; 158
 a92:	f9 1b       	sub	r31, r25
 a94:	98 2f       	mov	r25, r24
 a96:	87 2f       	mov	r24, r23
 a98:	76 2f       	mov	r23, r22
 a9a:	6b 2f       	mov	r22, r27
 a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__fixsfsi+0x20>
 a9e:	64 c0       	rjmp	.+200    	; 0xb68 <__fp_zero>
 aa0:	96 95       	lsr	r25
 aa2:	87 95       	ror	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	f1 50       	subi	r31, 0x01	; 1
 aaa:	d0 f7       	brcc	.-12     	; 0xaa0 <__fixsfsi+0x18>
 aac:	3e f4       	brtc	.+14     	; 0xabc <__fp_lneg+0xe>

00000aae <__fp_lneg>:
 aae:	90 95       	com	r25
 ab0:	80 95       	com	r24
 ab2:	70 95       	com	r23
 ab4:	61 95       	neg	r22
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__floatunssisf>:
 abe:	e8 94       	clt
 ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__floatsisf+0x6>

00000ac2 <__floatsisf>:
 ac2:	97 fb       	bst	r25, 7
 ac4:	0e f4       	brtc	.+2      	; 0xac8 <__floatsisf+0x6>
 ac6:	f3 df       	rcall	.-26     	; 0xaae <__fp_lneg>
 ac8:	b6 2f       	mov	r27, r22
 aca:	67 2f       	mov	r22, r23
 acc:	78 2f       	mov	r23, r24
 ace:	89 2f       	mov	r24, r25
 ad0:	9e e9       	ldi	r25, 0x9E	; 158
 ad2:	00 24       	eor	r0, r0
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__fp_merge>
 ad6:	9a 95       	dec	r25
 ad8:	bb 0f       	add	r27, r27
 ada:	66 1f       	adc	r22, r22
 adc:	77 1f       	adc	r23, r23
 ade:	88 1f       	adc	r24, r24

00000ae0 <__fp_merge>:
 ae0:	11 24       	eor	r1, r1
 ae2:	99 23       	and	r25, r25
 ae4:	a1 f0       	breq	.+40     	; 0xb0e <__fp_merge+0x2e>
 ae6:	88 23       	and	r24, r24
 ae8:	b2 f7       	brpl	.-20     	; 0xad6 <__floatsisf+0x14>
 aea:	9f 3f       	cpi	r25, 0xFF	; 255
 aec:	59 f0       	breq	.+22     	; 0xb04 <__fp_merge+0x24>
 aee:	bb 0f       	add	r27, r27
 af0:	48 f4       	brcc	.+18     	; 0xb04 <__fp_merge+0x24>
 af2:	21 f4       	brne	.+8      	; 0xafc <__fp_merge+0x1c>
 af4:	00 20       	and	r0, r0
 af6:	11 f4       	brne	.+4      	; 0xafc <__fp_merge+0x1c>
 af8:	60 ff       	sbrs	r22, 0
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <__fp_merge+0x24>
 afc:	6f 5f       	subi	r22, 0xFF	; 255
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	88 1f       	adc	r24, r24
 b06:	97 95       	ror	r25
 b08:	87 95       	ror	r24
 b0a:	97 f9       	bld	r25, 7
 b0c:	08 95       	ret
 b0e:	2c c0       	rjmp	.+88     	; 0xb68 <__fp_zero>

00000b10 <__fp_nan>:
 b10:	9f ef       	ldi	r25, 0xFF	; 255
 b12:	80 ec       	ldi	r24, 0xC0	; 192
 b14:	08 95       	ret

00000b16 <__fp_split3>:
 b16:	05 2e       	mov	r0, r21
 b18:	09 26       	eor	r0, r25
 b1a:	07 fa       	bst	r0, 7

00000b1c <__fp_split2>:
 b1c:	44 0f       	add	r20, r20
 b1e:	55 1f       	adc	r21, r21
 b20:	5f 3f       	cpi	r21, 0xFF	; 255
 b22:	79 f0       	breq	.+30     	; 0xb42 <__fp_split1+0x14>
 b24:	aa 27       	eor	r26, r26
 b26:	a5 17       	cp	r26, r21
 b28:	08 f0       	brcs	.+2      	; 0xb2c <__fp_split2+0x10>
 b2a:	51 e0       	ldi	r21, 0x01	; 1
 b2c:	47 95       	ror	r20

00000b2e <__fp_split1>:
 b2e:	88 0f       	add	r24, r24
 b30:	99 1f       	adc	r25, r25
 b32:	9f 3f       	cpi	r25, 0xFF	; 255
 b34:	31 f0       	breq	.+12     	; 0xb42 <__fp_split1+0x14>
 b36:	bb 27       	eor	r27, r27
 b38:	b9 17       	cp	r27, r25
 b3a:	08 f0       	brcs	.+2      	; 0xb3e <__fp_split1+0x10>
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	87 95       	ror	r24
 b40:	08 95       	ret
 b42:	9f 91       	pop	r25
 b44:	9f 91       	pop	r25
 b46:	11 24       	eor	r1, r1
 b48:	e3 cf       	rjmp	.-58     	; 0xb10 <__fp_nan>

00000b4a <__fp_split_a>:
 b4a:	97 fb       	bst	r25, 7
 b4c:	88 0f       	add	r24, r24
 b4e:	99 1f       	adc	r25, r25
 b50:	9f 3f       	cpi	r25, 0xFF	; 255
 b52:	31 f0       	breq	.+12     	; 0xb60 <__fp_split_a+0x16>
 b54:	bb 27       	eor	r27, r27
 b56:	b9 17       	cp	r27, r25
 b58:	08 f0       	brcs	.+2      	; 0xb5c <__fp_split_a+0x12>
 b5a:	91 e0       	ldi	r25, 0x01	; 1
 b5c:	87 95       	ror	r24
 b5e:	08 95       	ret
 b60:	9f 91       	pop	r25
 b62:	9f 91       	pop	r25
 b64:	11 24       	eor	r1, r1
 b66:	d4 cf       	rjmp	.-88     	; 0xb10 <__fp_nan>

00000b68 <__fp_zero>:
 b68:	66 27       	eor	r22, r22
 b6a:	77 27       	eor	r23, r23
 b6c:	88 27       	eor	r24, r24

00000b6e <__fp_zerox>:
 b6e:	99 27       	eor	r25, r25
 b70:	08 95       	ret

00000b72 <__udivmodsi4>:
 b72:	a1 e2       	ldi	r26, 0x21	; 33
 b74:	1a 2e       	mov	r1, r26
 b76:	aa 1b       	sub	r26, r26
 b78:	bb 1b       	sub	r27, r27
 b7a:	fd 01       	movw	r30, r26
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <__udivmodsi4_ep>

00000b7e <__udivmodsi4_loop>:
 b7e:	aa 1f       	adc	r26, r26
 b80:	bb 1f       	adc	r27, r27
 b82:	ee 1f       	adc	r30, r30
 b84:	ff 1f       	adc	r31, r31
 b86:	a2 17       	cp	r26, r18
 b88:	b3 07       	cpc	r27, r19
 b8a:	e4 07       	cpc	r30, r20
 b8c:	f5 07       	cpc	r31, r21
 b8e:	20 f0       	brcs	.+8      	; 0xb98 <__udivmodsi4_ep>
 b90:	a2 1b       	sub	r26, r18
 b92:	b3 0b       	sbc	r27, r19
 b94:	e4 0b       	sbc	r30, r20
 b96:	f5 0b       	sbc	r31, r21

00000b98 <__udivmodsi4_ep>:
 b98:	66 1f       	adc	r22, r22
 b9a:	77 1f       	adc	r23, r23
 b9c:	88 1f       	adc	r24, r24
 b9e:	99 1f       	adc	r25, r25
 ba0:	1a 94       	dec	r1
 ba2:	69 f7       	brne	.-38     	; 0xb7e <__udivmodsi4_loop>
 ba4:	60 95       	com	r22
 ba6:	70 95       	com	r23
 ba8:	80 95       	com	r24
 baa:	90 95       	com	r25
 bac:	9b 01       	movw	r18, r22
 bae:	ac 01       	movw	r20, r24
 bb0:	bd 01       	movw	r22, r26
 bb2:	cf 01       	movw	r24, r30
 bb4:	08 95       	ret

00000bb6 <__prologue_saves__>:
 bb6:	2f 92       	push	r2
 bb8:	3f 92       	push	r3
 bba:	4f 92       	push	r4
 bbc:	5f 92       	push	r5
 bbe:	6f 92       	push	r6
 bc0:	7f 92       	push	r7
 bc2:	8f 92       	push	r8
 bc4:	9f 92       	push	r9
 bc6:	af 92       	push	r10
 bc8:	bf 92       	push	r11
 bca:	cf 92       	push	r12
 bcc:	df 92       	push	r13
 bce:	ef 92       	push	r14
 bd0:	ff 92       	push	r15
 bd2:	0f 93       	push	r16
 bd4:	1f 93       	push	r17
 bd6:	cf 93       	push	r28
 bd8:	df 93       	push	r29
 bda:	cd b7       	in	r28, 0x3d	; 61
 bdc:	de b7       	in	r29, 0x3e	; 62
 bde:	ca 1b       	sub	r28, r26
 be0:	db 0b       	sbc	r29, r27
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	f8 94       	cli
 be6:	de bf       	out	0x3e, r29	; 62
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	cd bf       	out	0x3d, r28	; 61
 bec:	09 94       	ijmp

00000bee <__epilogue_restores__>:
 bee:	2a 88       	ldd	r2, Y+18	; 0x12
 bf0:	39 88       	ldd	r3, Y+17	; 0x11
 bf2:	48 88       	ldd	r4, Y+16	; 0x10
 bf4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bf6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bf8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bfa:	8c 84       	ldd	r8, Y+12	; 0x0c
 bfc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bfe:	aa 84       	ldd	r10, Y+10	; 0x0a
 c00:	b9 84       	ldd	r11, Y+9	; 0x09
 c02:	c8 84       	ldd	r12, Y+8	; 0x08
 c04:	df 80       	ldd	r13, Y+7	; 0x07
 c06:	ee 80       	ldd	r14, Y+6	; 0x06
 c08:	fd 80       	ldd	r15, Y+5	; 0x05
 c0a:	0c 81       	ldd	r16, Y+4	; 0x04
 c0c:	1b 81       	ldd	r17, Y+3	; 0x03
 c0e:	aa 81       	ldd	r26, Y+2	; 0x02
 c10:	b9 81       	ldd	r27, Y+1	; 0x01
 c12:	ce 0f       	add	r28, r30
 c14:	d1 1d       	adc	r29, r1
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	cd bf       	out	0x3d, r28	; 61
 c20:	ed 01       	movw	r28, r26
 c22:	08 95       	ret

00000c24 <_exit>:
 c24:	ff cf       	rjmp	.-2      	; 0xc24 <_exit>
